---
title: "Informal Sensitivity Analysis Part 2"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)

library(purrr)

library(ggpubr)

library(here)
```


# Sensitivity Analysis with *ethresh*

* Assume +-15% uncertainty in *ethresh* parameter

* Default value from the function is 10,000

* Code so that its easy to change

```{r ethresh}

source(here("R/solarpv.R"))
load(here("data/sierraczosolar.rda"))

sierraczosolar <- sierraczosolar %>% subset(year > 1944 & year < 1954)
# lets try sensitivity analysis again,
# ethresh - is defaulted to 10000; lets try +- 15%
# lets try 20 samples
# assume a uniform distribution - we don't know anything about variation
deviation <- 0.15
base_thresh <- 10000
ethresh <- runif(
  min = base_thresh - deviation * base_thresh,
  max = base_thresh + deviation * base_thresh, n = 20
)

# now run our model for the parameters
site2 <- ethresh %>% map(~ solarpv(
  area = 0.1,
  solar = sierraczosolar, clr = "green",
  eunit = "W", g = FALSE, etype = "direct",
  ethresh = .x
))


# extract a useful data structure,lets say we want # just the annual data (not the mean), and then reformat as a data frame with nice column names
tmp <- map_df(site2, `[`, c("annual"))
site2df <- data.frame(
  year = tmp$annual$year,
  elect = tmp$annual$elect
)

# now we could plot
ggplot(
  site2df,
  aes(as.factor(year), elect, group = year)
) +
  geom_boxplot() +
  labs(y = "Electricity generated in W", x = "Year")

# we also might want to see mean electricity generation across parameter uncertainty
mean_elect <- map_df(site2, `[`, c("mean"))
# because there is only 1 value for each ethresh we can add as a column
mean_elect$ethresh <- ethresh


p1 <- ggplot(mean_elect, aes(y=mean)) +
  geom_boxplot() +
  labs(x = "Mean Annual Electricity W")
p1

# or plot how parameter values influence th emean
p2 <- ggplot(mean_elect, aes(ethresh, mean)) +
  geom_point(cex = 2, col = "orange") +
  labs(y = "Mean Annual Electricity W", x = "Threshold Radiation (kJ/m2)  \nabove which energy production is more efficient")
ggarrange(p1, p2)
```





# Combined sensivitivity analysis

* *eff*

* *ethresh*

Sample from both of them - each time we run the model we vary
both of the parameters



# Combined parameter sensitivity

Two possible approaches

* *for*  
* *pmap* from purrr

# using *pmap*

```{r secondsensitivity}
# generate samples for both parameters
nsamples <- 300
deviation <- 0.15
base_thresh <- 10000
ethresh <- runif(
  min = base_thresh - deviation * base_thresh,
  max = base_thresh + deviation * base_thresh, n = nsamples
)

eff <- rnorm(mean = 0.6, sd = 0.1, n = nsamples)

parms <- cbind.data.frame(eff, ethresh)

# use pmap
# takes function name and then names of all parameters that don't change
results <- parms %>% pmap(solarpv,
  area = 0.1,
  solar = sierraczosolar, clr = "green",
  eunit = "W", g = FALSE, etype = "direct"
)

results[[1]]
length(results)

# now we can extract results from the list as above
mean_elect <- map_df(results, `[`, c("mean"))
# and we can add the parameter values for each run
mean_elect <- cbind.data.frame(mean_elect, parms)

# plot - pick on of the 2 parameter as a color

p1 <- ggplot(mean_elect, aes(ethresh, mean, col = eff)) +
  geom_point(cex = 2) +
  labs(y = "Mean Annual Electricity W", x = "Threshold Radiation (kJ/m2)  \n above which energy production is more efficient")
p2 <- ggplot(mean_elect, aes(eff, mean, col = ethresh)) +
  geom_point(cex = 2) +
  labs(y = "Mean Annual Electricity W", x = "Efficiency")
ggarrange(p1, p2)

# what do we learn from this

# extract annual
tmp <- map_df(results, `[`, c("annual"))
annual_elect <- as.data.frame(tmp$annual$year)
colnames(annual_elect) <- "year"
annual_elect$elect <- tmp$annual$elect
```


# Using a *For* Loop
```{r}
# using a for loop
# start by creating a data structures to hold results, separate
# for scenario mean and annual values
mean_elect_for <- rep(NA, times = nsamples)
# for annual we need rows as years, columns for samples
years <- unique(sierraczosolar$year)
annual_elect_for <- as.data.frame(matrix(ncol = nsamples, nrow = length(years)))
annual_elect_for$year <- years


for (i in 1:nsamples) {
  res <- solarpv(
    area = 0.1, solar = sierraczosolar,
    clr = "green", eunit = "W", g = FALSE, etype = "direct",
    ethresh = parms$ethresh[i],
    eff = parms$eff[i]
  )

  annual_elect_for[, i] <- res$annual$elect
  mean_elect_for[i] <- res$mean
}

# plot
me <- cbind.data.frame(mean = mean_elect_for, parms)
ggplot(me, aes(eff, mean, col = ethresh)) +
  geom_point(cex = 2) +
  labs(y = "Mean Annual Electricity W", x = "Efficiency")

tmp <- annual_elect_for %>% pivot_longer(cols = -c(year))

ggplot(tmp, aes(as.factor(year), value)) +
  geom_boxplot() +
  labs(y = "Mean Annual Electricity W", x = "Year")
```

# Code for putting models together

To start - lets create what we need to compute net present value of power generated for multiple years 

* compute_profit_frompower.R

We will use output from our solarpv function as input into a function that estimates profit given a price - and also 'calls' another function to compute net present value

* compute_NPV 
    * inputs: value, time, discount rate
    
    * output  net present value of input value provide as some time in the future

* compute_profit_frompower
    
    * inputs: energy, year (energy was produced in) price, discount rate
    * outputs: single dataframe with columns for
                    * energy
                    * year
                    * net (profit from energy in that year)
                    * netpre (net present value of that profit)

```{r valuep}
source(here("R", "compute_NPV.R"))
source(here("R", "compute_profit_frompower.R"))


compute_profit_frompower

compute_NPV

# use solar from  site1 from above as input
head(annual_elect)

profit_solar <- compute_profit_frompower(
  energy = annual_elect$elect,
  year = annual_elect$year,
  price = 30, discount = 0.04
)

head(profit_solar)

ggplot(profit_solar, aes(as.factor(year), netpre, group = year)) +
  geom_boxplot() +
  labs(y = "Profit in current $", x = "Year")
```


# Putting it all together

- Recall our function that computes hydro power

-  lets add both of our functions (hydro and solar power), together with computing profit and sensitivity analysis to create a full picture of power options


Notice that we can 're-use' our functions such as **compute_profit_frompower** for both sources of power
(such as our reservoir power model) to build out our complete model

```{r reuse}
# rerun 'sampling' in using_data_with_functions.Rmd. above to get results from our reserovir model

# lets start with hydro power
source(here("R/power_gen.R"))

# we are 'making up' inputs for hydro power - to have it match the number of year
# that we had solar values for, lets sets the number of runs equal to the number of years

number_years <- length(profit_solar$year)

reservoir_model_res <- as.data.frame(matrix(nrow = number_years, ncol = 3))

colnames(reservoir_model_res) <- c("height", "flow", "power")

# Step 2 - generate heights and flow rates
reservoir_model_res$height <- rnorm(mean = 10, sd = 1, n = number_years)

reservoir_model_res$flow <- runif(min = 0.1, max = 1, n = number_years)

# Step 3 - generate uncertainty due to reservoir efficiency, lets assume that
# we know its somewhere between 0.4 and 0.7
Keff <- runif(min = 0.4, max = 0.7, n = 20)

# Step 3 - apply model to get power for each height, flow rate (each year), across
# uncertainty in efficiency
reservoir <- Keff %>% map_dfc(~ power_gen(
  height = reservoir_model_res$height,
  flow = reservoir_model_res$flow, Keff = .x
))

colnames(reservoir) <- Keff

head(reservoir)

# add years - remember we are making up data for the same years that we have solar
reservoir$year <- profit_solar$year

# reorganize for easier analysis
reservoirg <- as.data.frame(reservoir) %>% pivot_longer(!year, names_to = "Keff", values_to = "power")
head(reservoirg)

# create profit from hydro
profit_hydro <- compute_profit_frompower(energy = reservoirg$power, year = reservoirg$year, price = 30, discount = 0.04)

names(profit_hydro)

# plot
ggplot(profit_hydro, aes(as.factor(year), netpre, group = year)) +
  geom_boxplot() +
  labs(y = "Net Present Value of Power in 1945 Dollars", x = "Year")

# compare with solar
a <- ggplot(profit_hydro, aes(year, netpre, group = year)) +
  geom_boxplot() +
  labs(title = "Hydro", y = "Net Present Values in 1945 Dollars", x = "Year")
b <- ggplot(profit_solar, aes(year, netpre, group = year)) +
  geom_boxplot() +
  labs(title = "Solar", y = "Net Present Values in 1945 Dollars", x = "Year")
ggarrange(a, b)

# put on one graph
ggplot(profit_hydro, aes(year, netpre, group = year)) +
  geom_boxplot() +
  labs(y = "Net Present Values in 1945 Dollars", x = "Year", title = "Both") +
  geom_boxplot(data = profit_solar, aes(year, netpre, group = year), fill = "orange")

# or do get a nice legend
profit_hydro$etype <- "Hydro"
profit_solar$etype <- "Solar"
tmp <- rbind.data.frame(profit_hydro, profit_solar)
ggplot(tmp, aes(as.factor(year), netpre, fill = etype)) +
  geom_boxplot() +
  labs(y = "Net Present Values in 1945 Dollars", x = "Year", fill = "Power Type") +
  scale_fill_manual(values = c("blue", "orange"))
```
